using System.Text;
using CsQuery;

namespace MarkdownWeb.PostFilters
{
    /// <summary>
    ///     <para>
    ///         Generates a Table Of Contents by using all heading elements that have an ID (id's can be generated by the
    ///         <see cref="AnchorHeadings" /> post filter).
    ///     </para>
    ///     <para>End result:</para>
    ///     <code>
    /// <![CDATA[
    /// <div class="toc">
    /// <ul>
    /// <li class="heading1"><a href="#firstId">First heading</a></li>
    /// <li class="heading2"><a href="#heading2Id">Subheading</a></li>
    /// <li class="heading1"><a href="#anotherId">Another H1</a></li>
    /// </ul>
    /// </div>
    /// ]]>
    /// </code>
    ///     <para>
    ///         i.e. you can style the <c>ul</c> or the <c>div</c> to place the TOC and use the class on the <c>li</c> items to indent sub headings.
    ///     </para>
    /// </summary>
    public class TableOfContents : IPostFilter
    {
        public string Parse(PostFilterContext context)
        {
            var toc = new StringBuilder();
            toc.AppendLine(@"<div class=""toc"">");
            toc.AppendLine("<ul>");
            var doc = new CQ(context.HtmlToParse);
            doc["h1,h2,h3,h4,h5,h6"].Each(el =>
            {
                var myDepth = int.Parse(el.NodeName.Substring(1, 1));
                if (!string.IsNullOrEmpty(el.Id))
                    toc.AppendFormat("<li class=\"heading{2}\"><a href=\"#{0}\">{1}</a></li>\r\n", el.Id, el.InnerText,
                        myDepth);
            });
            toc.AppendLine("</ul>");
            toc.AppendLine("</div>");
            context.AddPart("TableOfContents", toc.ToString());


            return context.HtmlToParse;
        }
    }
}